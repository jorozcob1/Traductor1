/* The following code was generated by JFlex 1.6.1 */

package Clases;
import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import Tablas.TablaErrores;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:\Users\Usuario\Desktop\ElCompliIE2.1\src\Lexico\lex.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int A = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\56\1\57\1\57\1\56\22\0\1\34\1\46\5\0"+
    "\1\35\1\47\1\50\1\53\1\0\1\40\1\33\1\37\1\54\12\0"+
    "\1\42\1\41\3\0\1\44\1\0\1\1\1\17\1\2\1\22\1\10"+
    "\1\27\1\7\1\24\1\4\1\30\1\21\1\13\1\12\1\6\1\5"+
    "\1\16\1\31\1\11\1\14\1\3\1\25\1\26\1\15\1\23\1\20"+
    "\1\32\1\51\1\0\1\52\3\0\1\1\1\17\1\2\1\22\1\10"+
    "\1\27\1\7\1\24\1\4\1\30\1\21\1\13\1\12\1\6\1\5"+
    "\1\16\1\31\1\11\1\14\1\3\1\25\1\26\1\15\1\23\1\20"+
    "\1\32\12\0\1\57\33\0\1\45\35\0\1\43\160\0\2\4\115\0"+
    "\1\14\u1e99\0\1\36\16\0\1\57\1\57\u0100\0\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\25\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\0\1\24"+
    "\1\0\1\2\4\0\1\24\20\0\1\24\6\0\1\3"+
    "\1\24\4\0\1\25\4\0\1\24\1\26\4\0\1\24"+
    "\2\0\1\27\4\0\1\30\27\0\1\31\11\0\1\32"+
    "\16\0\1\3\13\0\1\30\2\0\1\24\1\0\1\26"+
    "\7\0\1\30\6\0\1\3\3\0\1\24\17\0\1\5"+
    "\1\0\1\30\3\0\1\33\1\34\5\0\1\35\1\36"+
    "\11\0\1\35\3\0\1\30\11\0\1\30\4\0\1\34"+
    "\47\0\1\37\5\0\1\37\4\0\1\40\2\0\1\41"+
    "\6\0\1\42\12\0\1\43\5\0\1\37\21\0\1\27"+
    "\1\0\1\44\1\45\12\0\1\33\12\0\1\30\1\34"+
    "\21\0\1\33\15\0\1\46\4\0\1\34\24\0\1\41"+
    "\22\0\1\37\6\0\1\34\2\0\1\30\21\0\1\3"+
    "\1\34\5\0\1\33\1\0\1\30\1\0\1\33\1\0"+
    "\1\47\12\0\1\50\7\0\1\24\11\0\1\51\1\33"+
    "\6\0\1\30\15\0\1\24\2\0\1\3\32\0\1\34"+
    "\5\0\1\31\1\33\2\0\1\51\2\0\1\31\11\0"+
    "\1\24\4\0\1\52\10\0\1\24\4\0\1\35\74\0"+
    "\1\46\2\0\1\30\1\0\1\34\12\0\1\30\15\0"+
    "\1\53\1\24\1\0\1\53\3\0\1\3\30\0\1\32"+
    "\10\0\1\24\3\0\1\37\4\0\1\24\2\0\1\24"+
    "\51\0\1\30\1\0\1\35\2\0\1\30\1\0\1\34"+
    "\2\0\1\34\5\0\1\35\1\33\3\0\1\33\2\0"+
    "\1\51\4\0\1\30\3\0\1\54\1\0\1\33\4\0"+
    "\1\50\4\0\1\45\2\0\1\34\23\0\1\46\24\0"+
    "\1\52\10\0\1\34\5\0\1\33\12\0\1\37\4\0"+
    "\1\37\27\0\1\24\6\0\1\30\3\0\1\30\4\0"+
    "\1\55\11\0\1\53\1\52\15\0\1\35\31\0\1\45"+
    "\3\0\1\37\16\0\1\24\11\0\1\41\1\0\1\30"+
    "\24\0\1\30\11\0\1\52\45\0\1\24\25\0\1\37"+
    "\10\0\1\30\1\37\3\0\1\56\36\0\1\33\4\0"+
    "\1\36\10\0\1\57\1\56\3\0\1\60\13\0\1\52"+
    "\11\0\1\61\1\60\2\0\1\62\1\63\4\0\1\64"+
    "\1\0\1\62\50\0\1\65\57\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\60\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\u1410\0\60\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\60\0\u1bf0"+
    "\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70"+
    "\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0"+
    "\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070"+
    "\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0\0\u21f0"+
    "\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\60"+
    "\0\60\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460\0\60"+
    "\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0\0\u25e0"+
    "\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\60\0\u2700\0\u2730"+
    "\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0"+
    "\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30"+
    "\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0"+
    "\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30"+
    "\0\u2d60\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0"+
    "\0\u2ee0\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030"+
    "\0\u3060\0\u3090\0\u30c0\0\u29a0\0\u30f0\0\u3120\0\u3150\0\u3180"+
    "\0\u31b0\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300"+
    "\0\u3330\0\u3360\0\60\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450"+
    "\0\u3480\0\60\0\u34b0\0\u34e0\0\u3510\0\u3540\0\u3570\0\u35a0"+
    "\0\u35d0\0\u3600\0\u3630\0\u3660\0\60\0\u3690\0\u36c0\0\u36f0"+
    "\0\u3720\0\u3750\0\u3780\0\u37b0\0\u37e0\0\u3810\0\u3840\0\u3870"+
    "\0\u38a0\0\u38d0\0\u3900\0\u3930\0\u3960\0\u3990\0\u39c0\0\u39f0"+
    "\0\u22b0\0\u3a20\0\u3a50\0\u3a80\0\u3ab0\0\u3ae0\0\60\0\60"+
    "\0\u3b10\0\u3b40\0\u3b70\0\u3ba0\0\u3bd0\0\u3c00\0\u3c30\0\u3c60"+
    "\0\u3c90\0\u3cc0\0\u3cf0\0\u3d20\0\u3d50\0\u3d80\0\u3db0\0\u3de0"+
    "\0\u3e10\0\u3e40\0\u3e70\0\u3ea0\0\u3ed0\0\u3f00\0\u3f30\0\u3f60"+
    "\0\u3f90\0\u3fc0\0\u3ff0\0\u4020\0\u4050\0\u4080\0\u40b0\0\u40e0"+
    "\0\u4110\0\u4140\0\u4170\0\u41a0\0\u41d0\0\u4200\0\u4230\0\u4260"+
    "\0\u4290\0\u42c0\0\u42f0\0\u4320\0\u4350\0\u4380\0\u43b0\0\u43e0"+
    "\0\u4410\0\u4440\0\u4470\0\u44a0\0\u44d0\0\u4500\0\u4530\0\u4560"+
    "\0\u4590\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680\0\u46b0\0\u46e0"+
    "\0\u4710\0\u4740\0\u4770\0\u47a0\0\u47d0\0\u4800\0\u4830\0\u4860"+
    "\0\u4890\0\u48c0\0\u48f0\0\u4920\0\u4950\0\u4980\0\u49b0\0\u49e0"+
    "\0\u2c70\0\u4a10\0\u4a40\0\u4a70\0\u4aa0\0\u4ad0\0\u4b00\0\u4b30"+
    "\0\u4b60\0\u4b90\0\u4bc0\0\u4bf0\0\u4c20\0\u4c50\0\u4c80\0\u4cb0"+
    "\0\u4ce0\0\u4d10\0\u4d40\0\u4d70\0\u4da0\0\u4dd0\0\u4e00\0\u4e30"+
    "\0\u4e60\0\u4e90\0\u4ec0\0\u4ef0\0\u4f20\0\u4f50\0\u4f80\0\u4fb0"+
    "\0\u4fe0\0\u5010\0\u5040\0\u5070\0\u50a0\0\u50d0\0\u5100\0\u5130"+
    "\0\u5160\0\u5190\0\u51c0\0\u51f0\0\u5220\0\u5250\0\u5280\0\u52b0"+
    "\0\u52e0\0\u5310\0\u5340\0\u5370\0\u53a0\0\u53d0\0\u4560\0\u5400"+
    "\0\u5430\0\u5460\0\u5490\0\u54c0\0\60\0\u54f0\0\u5520\0\u5550"+
    "\0\u5580\0\u55b0\0\u55e0\0\u5610\0\u5640\0\u5670\0\u56a0\0\u56d0"+
    "\0\u5700\0\u5730\0\u5760\0\u5790\0\u57c0\0\u57f0\0\u5820\0\u5850"+
    "\0\u5880\0\u58b0\0\u58e0\0\u5910\0\u5940\0\u5970\0\u59a0\0\u59d0"+
    "\0\u5a00\0\60\0\u5a30\0\u4ec0\0\u5a60\0\u5a90\0\u5ac0\0\u5af0"+
    "\0\u5b20\0\u5b50\0\u5b80\0\u5bb0\0\u5be0\0\u5c10\0\u5c40\0\u5c70"+
    "\0\u5ca0\0\u5cd0\0\u5d00\0\u5d30\0\u5d60\0\u5d90\0\u5dc0\0\u5df0"+
    "\0\u5e20\0\u5e50\0\u5e80\0\u5eb0\0\u5ee0\0\u5f10\0\u5f40\0\u5f70"+
    "\0\u5fa0\0\u5fd0\0\u6000\0\u6030\0\u6060\0\u6090\0\u60c0\0\u60f0"+
    "\0\u6120\0\u6150\0\u6180\0\u61b0\0\u61e0\0\u6210\0\u6240\0\u6270"+
    "\0\u62a0\0\u62d0\0\u6300\0\u6330\0\u6360\0\u1f20\0\u6390\0\u63c0"+
    "\0\u63f0\0\u6420\0\u6450\0\u6480\0\u42f0\0\u64b0\0\u64e0\0\u6510"+
    "\0\u6540\0\u6570\0\u65a0\0\u65d0\0\u6600\0\u6630\0\u6660\0\u6690"+
    "\0\u66c0\0\u66f0\0\u6720\0\u6750\0\60\0\u6780\0\u67b0\0\u67e0"+
    "\0\u6810\0\u6840\0\u6870\0\u68a0\0\u68d0\0\u6900\0\u6930\0\u6960"+
    "\0\u6990\0\u4d70\0\u69c0\0\u69f0\0\u6a20\0\u6a50\0\u6a80\0\60"+
    "\0\u6ab0\0\u6ae0\0\u6b10\0\u6b40\0\u6b70\0\u6ba0\0\u6bd0\0\u6c00"+
    "\0\u6c30\0\u6c60\0\u6c90\0\u6cc0\0\u6cf0\0\u6d20\0\u6d50\0\u6d80"+
    "\0\u6db0\0\u6de0\0\u6e10\0\u6e40\0\u6e70\0\u6ea0\0\u6ed0\0\u6f00"+
    "\0\u6f30\0\u6f60\0\u6f90\0\u6fc0\0\u6ff0\0\u7020\0\u7050\0\u7080"+
    "\0\u70b0\0\u70e0\0\u7110\0\u7140\0\u7170\0\u71a0\0\u71d0\0\u7200"+
    "\0\u7230\0\u7260\0\u7290\0\u72c0\0\u72f0\0\u7320\0\u7350\0\u7380"+
    "\0\u73b0\0\u73e0\0\u7410\0\u7440\0\u7470\0\u74a0\0\u74d0\0\u7500"+
    "\0\u7530\0\u7560\0\u7590\0\u75c0\0\60\0\u75f0\0\u7620\0\u7650"+
    "\0\u7680\0\u76b0\0\u76e0\0\u7710\0\u7740\0\u7770\0\u77a0\0\u77d0"+
    "\0\u7800\0\u7830\0\u7860\0\u7890\0\u78c0\0\u78f0\0\u7920\0\u7950"+
    "\0\u7980\0\u79b0\0\u79e0\0\u7a10\0\u7a40\0\u7a70\0\u7aa0\0\u7ad0"+
    "\0\u7b00\0\u7b30\0\u7b60\0\u4980\0\u7b90\0\u7bc0\0\u7bf0\0\u7c20"+
    "\0\u7c50\0\u7c80\0\u7cb0\0\u7ce0\0\u7d10\0\u7d40\0\u7d70\0\u7da0"+
    "\0\u7dd0\0\u7e00\0\u7e30\0\u7e60\0\u7e90\0\u7ec0\0\u7ef0\0\u7f20"+
    "\0\u7f50\0\u7f80\0\u7fb0\0\u7650\0\u7fe0\0\u8010\0\u8040\0\u8070"+
    "\0\u80a0\0\u80d0\0\60\0\u8100\0\u8130\0\u8160\0\u8190\0\u81c0"+
    "\0\u81f0\0\u8220\0\u8250\0\u8280\0\u82b0\0\u82e0\0\u8310\0\u8340"+
    "\0\u8370\0\u83a0\0\u83d0\0\u8400\0\u6330\0\u8430\0\u8460\0\u8490"+
    "\0\u84c0\0\u84f0\0\u8520\0\u8550\0\u8580\0\u85b0\0\u78c0\0\u85e0"+
    "\0\u8610\0\u8640\0\u8670\0\u86a0\0\u86d0\0\u8700\0\u8730\0\u8760"+
    "\0\u8790\0\u87c0\0\u87f0\0\u8820\0\u8850\0\u8880\0\u88b0\0\u88e0"+
    "\0\u8910\0\u8940\0\u8970\0\u3f00\0\u89a0\0\u89d0\0\u8a00\0\u8a30"+
    "\0\u8a60\0\u8a90\0\u8ac0\0\u8af0\0\u8b20\0\u8b50\0\u8b80\0\u8bb0"+
    "\0\u8be0\0\u0960\0\u8c10\0\u8c40\0\u8c70\0\u8ca0\0\u8cd0\0\u8d00"+
    "\0\u8d30\0\u8d60\0\u8d90\0\u8dc0\0\u8df0\0\u8e20\0\u8e50\0\u8e80"+
    "\0\u8eb0\0\u8ee0\0\u8f10\0\u8f40\0\u8f70\0\u8fa0\0\u4b90\0\u8fd0"+
    "\0\u9000\0\u9030\0\u9060\0\u9090\0\u90c0\0\u90f0\0\u9120\0\u9150"+
    "\0\u9180\0\u91b0\0\60\0\u91e0\0\u78c0\0\u9210\0\u9240\0\u9270"+
    "\0\u92a0\0\60\0\u92d0\0\u9300\0\u9330\0\u9360\0\u9390\0\u65a0"+
    "\0\u93c0\0\u2ac0\0\u93f0\0\u9420\0\u9450\0\u9480\0\u94b0\0\u94e0"+
    "\0\u9510\0\u9540\0\u9570\0\u95a0\0\u95d0\0\u9600\0\u9630\0\u9660"+
    "\0\u9690\0\u96c0\0\u96f0\0\u9720\0\u9750\0\u9780\0\u97b0\0\u97e0"+
    "\0\u9810\0\u9840\0\u9870\0\u98a0\0\u98d0\0\u9900\0\u9930\0\u9960"+
    "\0\u9990\0\u99c0\0\u99f0\0\u9a20\0\u9a50\0\u9a80\0\u9ab0\0\u9ae0"+
    "\0\u9b10\0\u9b40\0\60\0\u9b70\0\u9ba0\0\u9bd0\0\u9c00\0\u9c30"+
    "\0\u9c60\0\u9c90\0\u9cc0\0\u4fe0\0\u9cf0\0\u9d20\0\u9d50\0\u9d80"+
    "\0\u9db0\0\u2400\0\u9de0\0\u9e10\0\u9e40\0\u9e70\0\u9ea0\0\u9ed0"+
    "\0\u9f00\0\u9f30\0\u9f60\0\u9f90\0\60\0\u9fc0\0\u9ff0\0\u2640"+
    "\0\ua020\0\ua050\0\ua080\0\ua0b0\0\ua0e0\0\ua110\0\ua140\0\ua170"+
    "\0\ua1a0\0\ua1d0\0\ua200\0\ua230\0\ua260\0\ua290\0\ua2c0\0\ua2f0"+
    "\0\ua320\0\ua350\0\ua380\0\ua3b0\0\ua3e0\0\ua410\0\ua440\0\ua470"+
    "\0\ua4a0\0\ua4d0\0\ua500\0\ua530\0\ua560\0\ua590\0\ua5c0\0\ua5f0"+
    "\0\ua620\0\ua620\0\ua650\0\ua680\0\u6330\0\ua6b0\0\ua6e0\0\ua710"+
    "\0\ua740\0\60\0\ua770\0\ua7a0\0\ua7d0\0\ua800\0\ua830\0\ua860"+
    "\0\ua890\0\ua8c0\0\ua8f0\0\60\0\ua920\0\ua950\0\ua980\0\ua9b0"+
    "\0\ua9e0\0\uaa10\0\uaa40\0\uaa70\0\uaaa0\0\uaad0\0\uab00\0\uab30"+
    "\0\uab60\0\uab90\0\uabc0\0\uabf0\0\uac20\0\uac50\0\uac80\0\uacb0"+
    "\0\uace0\0\uad10\0\uad40\0\uad70\0\uada0\0\uadd0\0\uae00\0\uae30"+
    "\0\uae60\0\uae90\0\uaec0\0\uaef0\0\uaf20\0\uaf50\0\uaf80\0\uafb0"+
    "\0\uafe0\0\ub010\0\ub040\0\ub070\0\u83d0\0\ub0a0\0\ub0d0\0\ub100"+
    "\0\u8eb0\0\ub130\0\ub160\0\ub190\0\ub1c0\0\ub1f0\0\ub220\0\ub250"+
    "\0\ub280\0\ub2b0\0\ub2e0\0\ub310\0\ub340\0\ub370\0\ub3a0\0\ub3d0"+
    "\0\ub400\0\ub430\0\ub460\0\ub490\0\ub4c0\0\ub4f0\0\ub520\0\ub550"+
    "\0\ub580\0\u8d30\0\ub5b0\0\u4ec0\0\ub5e0\0\ub610\0\ub640\0\ub670"+
    "\0\ub6a0\0\ub6d0\0\ub700\0\ub730\0\ub760\0\ub790\0\ub7c0\0\ub7f0"+
    "\0\ub820\0\ub850\0\ub880\0\ub8b0\0\ub8e0\0\ub910\0\ub940\0\ub970"+
    "\0\u51f0\0\ub9a0\0\ub9d0\0\uba00\0\uba30\0\uba60\0\uba90\0\ubac0"+
    "\0\ubaf0\0\ubb20\0\ubb50\0\ubb80\0\ubbb0\0\ubbe0\0\ubc10\0\ubc40"+
    "\0\ubc70\0\ubca0\0\ubcd0\0\ubd00\0\ubd30\0\ubd60\0\ubd90\0\ubdc0"+
    "\0\ubdf0\0\ube20\0\ube50\0\ube80\0\ubeb0\0\ubee0\0\ubf10\0\ubf40"+
    "\0\ubf70\0\ubfa0\0\ubfd0\0\uc000\0\uc030\0\uc060\0\uc090\0\uc0c0"+
    "\0\uc0f0\0\uc120\0\uc150\0\uc180\0\uc1b0\0\uc1e0\0\uc210\0\uc240"+
    "\0\uc270\0\uc2a0\0\uc2d0\0\uc300\0\uc330\0\uc360\0\uc390\0\uc3c0"+
    "\0\uc3f0\0\uc420\0\uc450\0\uc270\0\uc480\0\uc4b0\0\uc4e0\0\uc510"+
    "\0\uc540\0\uc570\0\uc5a0\0\uc5d0\0\uc600\0\uc630\0\uc660\0\uc690"+
    "\0\uc6c0\0\uc6f0\0\uc720\0\uc750\0\uc780\0\uc7b0\0\uc7e0\0\uc810"+
    "\0\ua860\0\uc840\0\uc870\0\uc8a0\0\60\0\uc8d0\0\uc900\0\uc930"+
    "\0\uc960\0\uc990\0\uc9c0\0\uc9f0\0\uca20\0\uca50\0\uca80\0\ucab0"+
    "\0\ucae0\0\ucb10\0\ucb40\0\ucb70\0\ucba0\0\ucbd0\0\ucc00\0\ucc30"+
    "\0\ucc60\0\ucc90\0\uccc0\0\uccf0\0\ucd20\0\ucd50\0\ucd80\0\ucdb0"+
    "\0\ucde0\0\uce10\0\uce40\0\uce70\0\ucea0\0\uced0\0\ucf00\0\ucf30"+
    "\0\ubf40\0\ucf60\0\ucf90\0\ucfc0\0\ucff0\0\ud020\0\ud050\0\ud080"+
    "\0\ud0b0\0\60\0\ud0e0\0\ud110\0\ud140\0\ud170\0\uc270\0\ud1a0"+
    "\0\ud1d0\0\ud200\0\ud230\0\ud260\0\ud290\0\ud2c0\0\ud2f0\0\ud320"+
    "\0\ud350\0\ud380\0\uc270\0\ud3b0\0\ud3e0\0\ud410\0\ud440\0\ud470"+
    "\0\ud4a0\0\ud4d0\0\ud500\0\uce70\0\60\0\60\0\ud530\0\ud560"+
    "\0\60\0\60\0\ud590\0\ud5c0\0\ud5f0\0\ud620\0\60\0\ud650"+
    "\0\uc270\0\ud680\0\ud6b0\0\ud6e0\0\ud710\0\ud740\0\ud770\0\ud7a0"+
    "\0\ud7d0\0\ud800\0\ud830\0\ud860\0\ud890\0\ud8c0\0\ud8f0\0\ud920"+
    "\0\ud950\0\ud980\0\ud9b0\0\ud9e0\0\uda10\0\uda40\0\uda70\0\udaa0"+
    "\0\udad0\0\udb00\0\udb30\0\udb60\0\udb90\0\udbc0\0\udbf0\0\udc20"+
    "\0\udc50\0\udc80\0\udcb0\0\udce0\0\udd10\0\udd40\0\udd70\0\udda0"+
    "\0\uddd0\0\60\0\ude00\0\ude30\0\ude60\0\ude90\0\udec0\0\udef0"+
    "\0\udf20\0\udf50\0\udf80\0\udfb0\0\udfe0\0\ue010\0\ue040\0\ue070"+
    "\0\ue0a0\0\ue0d0\0\ue100\0\ue130\0\ue160\0\ue190\0\ue1c0\0\ue1f0"+
    "\0\ue220\0\ue250\0\ue280\0\ue2b0\0\ue2e0\0\ue310\0\ue340\0\ue370"+
    "\0\ue3a0\0\ue3d0\0\ue400\0\ue430\0\ue460\0\ue490\0\ue4c0\0\ue4f0"+
    "\0\ue520\0\ue550\0\ue580\0\ue5b0\0\ue5e0\0\ue610\0\ue640\0\ue670"+
    "\0\ue6a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\2\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\2\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\2\35\63\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\60\1\0\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\2\0\1\70\3\0\1\71"+
    "\1\72\31\0\1\73\2\0\1\74\1\75\2\0\1\76"+
    "\1\77\1\0\1\100\10\0\1\101\1\102\33\0\1\103"+
    "\2\0\1\104\1\105\2\0\1\106\1\107\3\0\1\110"+
    "\6\0\1\111\1\112\34\0\1\113\1\114\2\0\1\115"+
    "\2\0\1\116\1\117\1\0\1\120\5\0\1\121\4\0"+
    "\1\122\6\0\1\123\23\0\1\124\1\125\1\0\1\126"+
    "\1\127\2\0\1\130\4\0\1\131\1\132\5\0\1\133"+
    "\1\134\1\135\31\0\1\136\2\0\1\137\1\140\2\0"+
    "\1\141\14\0\1\142\33\0\1\143\2\0\1\144\1\145"+
    "\2\0\1\146\1\147\1\0\1\150\11\0\1\151\33\0"+
    "\1\152\2\0\1\153\1\0\1\154\1\155\2\0\1\156"+
    "\1\157\1\160\3\0\1\161\2\0\1\162\2\0\1\163"+
    "\32\0\1\164\2\0\1\165\1\166\2\0\1\167\14\0"+
    "\1\170\33\0\1\171\2\0\1\172\1\173\2\0\1\174"+
    "\7\0\1\175\4\0\1\176\33\0\1\177\2\0\1\200"+
    "\1\201\2\0\1\202\50\0\1\203\1\204\1\205\1\206"+
    "\1\207\1\210\1\0\1\211\1\0\1\212\1\213\1\0"+
    "\1\214\1\215\1\0\1\216\1\217\2\0\1\220\1\221"+
    "\3\0\1\222\27\0\1\223\2\0\1\224\1\225\2\0"+
    "\1\226\1\227\12\0\1\230\34\0\1\231\3\0\1\232"+
    "\2\0\1\233\1\234\1\0\1\235\11\0\1\236\33\0"+
    "\1\237\2\0\1\240\1\241\2\0\1\242\1\243\1\0"+
    "\1\244\4\0\1\245\4\0\1\246\33\0\1\247\3\0"+
    "\1\250\2\0\1\251\53\0\1\252\1\0\1\253\1\0"+
    "\1\254\50\0\1\255\2\0\1\256\1\257\2\0\1\260"+
    "\1\261\13\0\1\262\33\0\1\263\2\0\1\264\1\265"+
    "\2\0\1\266\14\0\1\267\40\0\1\270\5\0\1\271"+
    "\1\0\1\272\5\0\1\273\34\0\1\274\2\0\1\275"+
    "\1\276\53\0\1\277\2\0\1\300\1\301\2\0\1\302"+
    "\1\303\1\0\1\304\11\0\1\305\37\0\1\306\17\0"+
    "\1\307\57\0\1\310\42\0\1\311\123\0\1\312\5\0"+
    "\1\313\1\314\5\0\1\315\17\0\1\316\31\0\1\317"+
    "\4\0\1\320\60\0\1\321\52\0\1\322\1\323\1\324"+
    "\1\325\4\0\1\326\3\0\1\327\1\0\1\330\36\0"+
    "\1\331\6\0\1\321\1\332\50\0\1\333\1\321\1\0"+
    "\1\334\3\0\1\335\53\0\1\336\17\0\1\337\43\0"+
    "\1\340\1\341\1\342\1\0\1\343\45\0\1\344\10\0"+
    "\1\345\4\0\1\346\12\0\1\347\52\0\1\350\35\0"+
    "\1\351\10\0\1\352\42\0\1\353\3\0\1\354\6\0"+
    "\1\355\10\0\1\337\37\0\1\356\4\0\1\357\7\0"+
    "\1\360\3\0\1\361\36\0\1\362\55\0\1\363\23\0"+
    "\1\364\33\0\1\365\2\0\1\346\2\0\1\274\1\366"+
    "\1\367\1\370\1\0\1\371\6\0\1\372\35\0\1\373"+
    "\5\0\1\374\47\0\1\375\1\0\1\376\2\0\1\377"+
    "\2\0\1\u0100\1\u0101\1\u0102\1\102\1\321\1\373\6\0"+
    "\1\u0103\1\u0104\32\0\1\337\4\0\1\u0105\2\0\1\u0106"+
    "\47\0\1\u0107\3\0\1\u0108\12\0\1\346\40\0\1\u0109"+
    "\2\0\1\u010a\1\u010b\2\0\1\u010c\50\0\1\u010d\2\0"+
    "\1\u010e\1\u010f\2\0\1\u0110\52\0\1\320\66\0\1\271"+
    "\1\u0111\1\u0112\4\0\1\u0113\3\0\1\u0114\40\0\1\u0115"+
    "\1\0\1\346\1\271\1\0\1\u0116\51\0\1\u0117\4\0"+
    "\1\u0118\1\u0119\1\0\1\u011a\4\0\1\u011b\2\0\1\u011c"+
    "\33\0\1\u011c\4\0\1\u011d\4\0\1\u011e\1\146\44\0"+
    "\1\u011f\2\0\1\u0120\1\u0121\12\0\1\346\4\0\1\u0122"+
    "\37\0\1\u0123\2\0\1\u0124\50\0\1\u0125\2\0\1\u0126"+
    "\1\u0127\2\0\1\u0128\1\u0129\57\0\1\u012a\56\0\1\321"+
    "\7\0\1\u012b\40\0\1\u012c\12\0\1\175\17\0\1\u012d"+
    "\1\u012e\1\u012f\23\0\1\u0130\1\u0131\3\0\1\u0132\4\0"+
    "\1\u0133\5\0\1\u0134\3\0\1\u0135\1\u0136\1\0\1\316"+
    "\2\0\1\u0137\30\0\1\u0138\53\0\1\u0139\14\0\1\u013a"+
    "\54\0\1\u013b\54\0\1\u013c\61\0\1\u013d\47\0\1\u013e"+
    "\5\0\1\u013f\73\0\1\u0140\51\0\1\u0141\45\0\1\u0142"+
    "\3\0\1\u0143\2\0\1\u0144\20\0\1\u0145\32\0\1\u0146"+
    "\12\0\1\u0104\11\0\1\u0147\33\0\1\u012a\5\0\1\u0148"+
    "\54\0\1\u0149\14\0\1\u014a\31\0\1\u014b\1\u014c\5\0"+
    "\1\175\56\0\1\u014d\54\0\1\u014e\21\0\1\u014f\4\0"+
    "\1\u0150\26\0\1\u0151\6\0\1\271\47\0\1\u0152\3\0"+
    "\1\u0153\1\u0154\53\0\1\u0155\2\0\1\u0156\2\0\1\u0157"+
    "\2\0\1\161\1\u0158\16\0\1\u0159\24\0\1\u015a\2\0"+
    "\1\u015b\4\0\1\u015c\11\0\1\u015d\2\0\1\u015e\43\0"+
    "\1\u015f\50\0\1\u0160\1\u012a\4\0\1\u0161\1\u0162\1\0"+
    "\1\321\11\0\1\366\42\0\1\367\14\0\1\u0113\34\0"+
    "\1\u0163\2\0\1\u0164\4\0\1\u0165\12\0\1\u0166\34\0"+
    "\1\346\55\0\1\u0167\3\0\1\u0168\2\0\1\u0169\50\0"+
    "\1\u016a\57\0\1\u016b\6\0\1\u016c\51\0\1\u016d\1\u016e"+
    "\5\0\1\u016f\51\0\1\u0170\3\0\1\u0171\52\0\1\u0172"+
    "\1\u0104\1\0\1\u0173\1\0\1\u0174\1\u0175\11\0\1\346"+
    "\5\0\1\u0176\36\0\1\321\66\0\1\u0177\51\0\1\u0178"+
    "\52\0\1\u0179\64\0\1\321\50\0\1\u017a\1\u017b\1\u017c"+
    "\12\0\1\u017d\46\0\1\u017e\2\0\1\u017f\51\0\1\161"+
    "\1\u0180\1\u0138\1\0\1\u0181\13\0\1\u0182\43\0\1\155"+
    "\5\0\1\u0113\5\0\1\u0183\3\0\1\u0184\32\0\1\u0165"+
    "\1\u0185\11\0\1\366\1\321\4\0\1\366\2\0\1\u0186"+
    "\33\0\1\u0187\1\u0188\1\u0189\2\0\1\146\1\u0151\2\0"+
    "\1\u018a\1\u018b\1\146\1\0\1\u018c\10\0\1\u018d\1\0"+
    "\1\u018e\34\0\1\u018f\4\0\1\161\1\u0190\45\0\1\u0191"+
    "\1\u0192\1\u0193\1\0\1\u0194\2\0\1\274\4\0\1\321"+
    "\2\0\1\271\1\366\43\0\1\u0195\4\0\1\u0196\6\0"+
    "\1\u0197\42\0\1\u0138\1\u0198\2\0\1\u0199\13\0\1\u019a"+
    "\1\271\32\0\1\u019b\1\0\1\320\2\0\1\u019c\1\0"+
    "\1\146\51\0\1\u019d\11\0\1\u019e\46\0\1\u019f\2\0"+
    "\1\u01a0\2\0\1\u01a1\2\0\1\u01a2\1\321\3\0\1\161"+
    "\3\0\1\u01a3\4\0\1\u0115\30\0\1\u01a4\2\0\1\161"+
    "\1\u0154\1\321\3\0\1\u01a5\4\0\1\271\4\0\1\271"+
    "\1\161\35\0\1\u01a6\1\u01a7\5\0\1\u01a8\1\u01a9\7\0"+
    "\1\u01aa\1\271\32\0\1\u01ab\1\0\1\320\2\0\1\u01ac"+
    "\1\321\4\0\1\u01ad\5\0\1\320\3\0\1\u01ae\1\102"+
    "\33\0\1\320\1\u01af\1\0\1\u01b0\4\0\1\u01b1\1\0"+
    "\1\320\2\0\1\346\1\0\1\u012b\3\0\1\271\35\0"+
    "\1\u01b2\17\0\1\u01b3\34\0\1\u01b4\2\0\1\u01b5\1\u01b6"+
    "\2\0\1\u01b7\1\u01b8\13\0\1\u01b9\35\0\1\346\2\0"+
    "\1\u01ba\1\u0138\4\0\1\u01bb\5\0\1\161\1\u01bc\6\0"+
    "\1\161\33\0\1\321\3\0\1\u01bd\1\u01be\11\0\1\u01bf"+
    "\1\0\1\u01c0\4\0\1\u01c1\30\0\1\u01c2\53\0\1\u01c3"+
    "\1\u01c4\1\321\2\0\1\u01c5\1\0\1\u01c6\2\0\1\u011e"+
    "\12\0\1\u01c7\32\0\1\u01c8\2\0\1\u01c9\1\u017e\57\0"+
    "\1\u01ca\2\0\1\u01cb\50\0\1\u01cc\2\0\1\u01cd\3\0"+
    "\1\u01ce\14\0\1\u01cf\33\0\1\u01d0\2\0\1\u01d1\1\u01d2"+
    "\2\0\1\u01d3\1\u01d4\60\0\1\u01d5\51\0\1\u0138\54\0"+
    "\1\u01d6\3\0\1\u01d7\2\0\1\u01d8\14\0\1\102\34\0"+
    "\1\u016d\3\0\1\u01d9\1\u01da\1\0\1\u01db\4\0\1\u01dc"+
    "\10\0\1\u01dd\55\0\1\u01de\35\0\1\u011c\1\146\1\0"+
    "\1\146\4\0\1\u01a6\1\u01df\4\0\1\271\41\0\1\u01e0"+
    "\2\0\1\u01e1\4\0\1\u01e2\1\u0190\5\0\1\u0152\4\0"+
    "\1\161\36\0\1\u01e3\2\0\1\u01e4\1\u013f\2\0\1\u01e5"+
    "\3\0\1\u01e6\3\0\1\u01e7\33\0\1\u01e8\1\0\1\u012b"+
    "\1\u01e9\1\0\1\102\4\0\1\u01ea\22\0\1\u01eb\25\0"+
    "\1\u01ec\1\u01ed\53\0\1\u01ee\2\0\1\u01ef\1\u01f0\2\0"+
    "\1\u01f1\51\0\1\u01a6\1\0\1\u01f2\2\0\1\161\1\0"+
    "\1\u01f3\2\0\1\u01f4\1\0\1\u0184\1\0\1\346\52\0"+
    "\1\u01f5\1\u01f6\10\0\1\u01f7\43\0\1\u01f8\47\0\1\u01f9"+
    "\2\0\1\u01fa\1\u01fb\2\0\1\u01fc\50\0\1\u01fd\6\0"+
    "\1\u01fe\14\0\1\u01ff\35\0\1\320\2\0\1\u0200\4\0"+
    "\1\u011e\1\u0190\45\0\1\u0185\1\u0201\2\0\1\u0185\4\0"+
    "\1\367\3\0\1\373\2\0\1\u0202\40\0\1\u0203\3\0"+
    "\1\u012b\1\0\1\u0165\1\0\1\367\45\0\1\u0204\1\0"+
    "\1\u0205\1\u0206\1\u0185\1\161\11\0\1\321\1\0\1\373"+
    "\1\321\1\0\1\u0114\34\0\1\u0207\1\u0208\2\0\1\u0209"+
    "\1\u020a\1\u020b\2\0\1\u020c\1\u020d\3\0\1\u020e\1\0"+
    "\1\321\1\0\1\u020f\2\0\1\u0210\34\0\1\u0211\1\u0212"+
    "\2\0\1\u0213\50\0\1\u0214\3\0\1\u0215\2\0\1\u0216"+
    "\14\0\1\u0152\66\0\1\u0217\26\0\1\u0218\1\u0219\7\0"+
    "\1\u021a\3\0\1\346\64\0\1\u021b\33\0\1\56\1\0"+
    "\1\u0158\10\0\1\u021c\45\0\1\u01a6\10\0\1\u011e\1\u021d"+
    "\50\0\1\u021e\2\0\1\u0216\57\0\1\u021f\5\0\1\102"+
    "\1\0\1\321\45\0\1\u0220\2\0\1\u0221\1\u0222\2\0"+
    "\1\u012a\2\0\1\321\41\0\1\u0223\6\0\1\u0224\2\0"+
    "\1\u0225\5\0\1\320\3\0\1\u0226\33\0\1\u0227\2\0"+
    "\1\56\1\u0164\1\0\1\u021d\2\0\1\u0228\1\0\1\u0229"+
    "\44\0\1\u022a\1\u022b\7\0\1\u022c\1\u022d\11\0\1\u022e"+
    "\1\u022f\31\0\1\u0230\2\0\1\u0231\1\u0232\2\0\1\u0216"+
    "\7\0\1\u012b\4\0\1\u0233\42\0\1\u0234\1\u0235\51\0"+
    "\1\u0236\1\56\1\0\1\u0237\2\0\1\u0238\1\0\1\u0239"+
    "\2\0\1\u023a\3\0\1\320\3\0\1\271\34\0\1\320"+
    "\3\0\1\u023b\1\0\1\271\2\0\1\u023c\5\0\1\u023d"+
    "\40\0\1\u012b\5\0\1\u023e\1\161\1\u023f\1\0\1\u0240"+
    "\1\271\6\0\1\u0241\33\0\1\u0242\7\0\1\u0243\1\0"+
    "\1\u0244\4\0\1\u01e5\15\0\1\u012f\27\0\1\u0245\1\u0152"+
    "\1\0\1\u0246\51\0\1\u0247\1\u0112\6\0\1\u0248\6\0"+
    "\1\u0249\45\0\1\346\63\0\1\u024a\76\0\1\u024b\35\0"+
    "\1\u024c\47\0\1\u024d\11\0\1\u024e\1\u024f\60\0\1\u0250"+
    "\46\0\1\u0251\4\0\1\u0252\1\0\1\u0253\1\u0254\46\0"+
    "\1\u012b\2\0\1\u0255\1\u0256\1\0\1\u0257\1\0\1\u0258"+
    "\1\u0190\6\0\1\346\2\0\1\u0259\1\u025a\41\0\1\u025b"+
    "\1\0\1\u025c\11\0\1\u025d\33\0\1\u025e\1\0\1\u011c"+
    "\4\0\1\u011e\2\0\1\u025f\1\0\1\u0260\46\0\1\u0261"+
    "\1\u0262\2\0\1\u0263\54\0\1\u0264\2\0\1\u0216\7\0"+
    "\1\346\50\0\1\u0265\52\0\1\u012a\12\0\1\321\1\0"+
    "\1\271\50\0\1\u021f\1\0\1\u0266\53\0\1\u0267\60\0"+
    "\1\u0268\46\0\56\312\7\0\1\u0269\2\0\1\u026a\14\0"+
    "\1\u026b\36\0\1\116\60\0\1\u026c\77\0\1\u026d\33\0"+
    "\1\u026e\6\0\1\u026f\1\u0270\60\0\1\u0271\72\0\1\u0272"+
    "\37\0\1\u0273\63\0\1\u0115\63\0\1\u0184\54\0\1\u0274"+
    "\51\0\1\u0275\63\0\1\271\73\0\1\u018b\60\0\1\u0276"+
    "\33\0\1\u0277\2\0\1\u0278\61\0\1\u0279\16\0\1\u027a"+
    "\46\0\1\271\53\0\1\u027b\54\0\1\u027c\57\0\1\u027d"+
    "\53\0\1\u027e\63\0\1\u027f\77\0\1\u0280\45\0\1\u0281"+
    "\1\u0282\1\u0283\11\0\1\u0284\55\0\1\u0285\45\0\1\u0286"+
    "\51\0\1\u0287\2\0\1\u0288\1\u0289\1\0\1\161\52\0"+
    "\1\u028a\64\0\1\u0200\11\0\1\u028b\1\u028c\36\0\1\u028d"+
    "\63\0\1\u028e\52\0\1\u028f\64\0\1\u0290\47\0\1\u0291"+
    "\2\0\1\337\3\0\1\u0292\53\0\1\u0293\63\0\1\u0294"+
    "\53\0\1\u0295\55\0\1\u0190\65\0\1\320\62\0\1\321"+
    "\54\0\1\321\13\0\1\346\37\0\1\u0296\62\0\1\u0297"+
    "\4\0\1\161\63\0\1\321\41\0\1\u0298\71\0\1\u0204"+
    "\46\0\1\116\56\0\1\u0299\1\u029a\10\0\1\u029b\51\0"+
    "\1\321\2\0\1\u029c\56\0\1\u029d\1\0\1\u029e\3\0"+
    "\1\u029f\1\u02a0\45\0\1\56\5\0\1\u029c\6\0\1\u012b"+
    "\43\0\1\u02a1\1\u0190\1\0\1\u023e\1\0\1\u0119\54\0"+
    "\1\u025e\52\0\1\u02a2\57\0\1\u02a3\106\0\1\u0115\41\0"+
    "\1\u021d\1\u02a4\46\0\1\u01cd\7\0\1\u02a5\55\0\1\u02a6"+
    "\50\0\1\u02a7\10\0\1\u02a8\10\0\1\u0165\33\0\1\u02a9"+
    "\24\0\1\u02aa\37\0\1\u02ab\64\0\1\u02ac\51\0\1\337"+
    "\6\0\1\u01e6\45\0\1\u0185\70\0\1\u012b\5\0\1\346"+
    "\41\0\1\271\64\0\1\u02ad\56\0\1\u0297\70\0\1\u012b"+
    "\52\0\1\u024d\65\0\1\320\12\0\1\u02ae\30\0\1\u02af"+
    "\74\0\1\320\36\0\1\u02b0\57\0\1\u02b1\61\0\1\u02b2"+
    "\30\0\1\u02b3\36\0\1\346\52\0\1\u02b4\17\0\1\u02b5"+
    "\32\0\1\u02b6\103\0\1\u02b7\46\0\1\146\77\0\1\u02b8"+
    "\31\0\1\u02b9\4\0\1\u02ba\47\0\1\u02bb\2\0\1\u02bc"+
    "\57\0\1\u01a6\2\0\1\u02bd\2\0\1\u02be\57\0\1\u02bf"+
    "\10\0\1\u0114\36\0\1\u02c0\1\0\1\u0158\2\0\1\u02c1"+
    "\2\0\1\u02bf\3\0\1\u02c2\44\0\1\u02c3\2\0\1\u02c4"+
    "\55\0\1\346\64\0\1\u02c5\63\0\1\u02c6\54\0\1\u02c7"+
    "\57\0\1\u013d\54\0\1\u02c8\1\0\1\u02c9\10\0\1\321"+
    "\40\0\1\u024d\2\0\1\u02ca\52\0\1\u02cb\1\u02cc\3\0"+
    "\1\u02cd\74\0\1\u02ce\36\0\1\u0112\3\0\1\u027a\54\0"+
    "\1\u02cf\53\0\1\u02d0\1\0\1\u02d1\10\0\1\u02d2\12\0"+
    "\1\u02d3\36\0\1\321\60\0\1\u02d4\55\0\1\u02d5\3\0"+
    "\1\u02d6\1\0\1\u024c\45\0\1\u01f7\57\0\1\321\103\0"+
    "\1\u02d7\33\0\1\u0138\66\0\1\u02d8\63\0\1\u01e5\51\0"+
    "\1\u02d9\105\0\1\u02da\43\0\1\u02db\42\0\1\u02dc\13\0"+
    "\1\u02dd\41\0\1\u02de\65\0\1\u02df\1\u02e0\54\0\1\u02e1"+
    "\56\0\1\u02e2\3\0\1\u024c\57\0\1\u02cd\73\0\1\u01e5"+
    "\47\0\1\u02e3\54\0\1\u02e4\73\0\1\u02e5\36\0\1\u02e6"+
    "\3\0\1\u025e\51\0\1\u02e7\65\0\1\u012b\52\0\1\u02b2"+
    "\4\0\1\u02e8\73\0\1\u0204\37\0\1\u0220\3\0\1\321"+
    "\13\0\1\u02e9\7\0\1\u02ea\33\0\1\u02eb\63\0\1\u02ec"+
    "\54\0\1\u02ed\51\0\1\u02ee\102\0\1\u02ef\34\0\1\u02f0"+
    "\30\0\1\u02f1\33\0\1\u02f2\66\0\1\u0184\64\0\1\u0104"+
    "\55\0\1\u02f3\45\0\1\321\6\0\1\u01c9\74\0\1\u02f4"+
    "\33\0\1\u029d\71\0\1\321\45\0\1\u02f5\55\0\1\146"+
    "\5\0\1\u02a5\60\0\1\u02ad\7\0\1\u02f6\33\0\1\u01c0"+
    "\6\0\1\146\4\0\1\320\56\0\1\u02a5\54\0\1\u0293"+
    "\62\0\1\u021d\67\0\1\u0260\43\0\1\u02f7\52\0\1\u02f8"+
    "\2\0\1\346\75\0\1\u02f9\57\0\1\u02fa\40\0\1\u02fb"+
    "\5\0\1\u02fc\71\0\1\u02fd\45\0\1\u02fe\55\0\1\u02ff"+
    "\53\0\1\u024c\65\0\1\u0176\46\0\1\146\23\0\1\u0300"+
    "\32\0\1\u0301\6\0\1\u0302\51\0\1\u0303\7\0\1\u0304"+
    "\55\0\1\u0305\13\0\1\u0306\44\0\1\u0270\53\0\1\337"+
    "\2\0\1\u0307\1\u0290\1\0\1\u0308\65\0\1\271\44\0"+
    "\1\u0309\75\0\1\u030a\42\0\1\320\54\0\1\u030b\63\0"+
    "\1\346\11\0\1\u030c\45\0\1\56\70\0\1\321\44\0"+
    "\1\u01aa\53\0\1\u0190\10\0\1\u030d\1\116\5\0\1\320"+
    "\40\0\1\u0120\1\0\1\u030e\2\0\1\u030f\74\0\1\112"+
    "\33\0\1\u0310\2\0\1\u01e7\1\u0278\2\0\1\u0311\53\0"+
    "\1\u0312\54\0\1\u0313\3\0\1\u02d5\2\0\1\u0314\2\0"+
    "\1\u024c\54\0\1\u025e\7\0\1\337\64\0\1\u0315\41\0"+
    "\1\u029d\74\0\1\346\57\0\1\u0316\43\0\1\u0317\55\0"+
    "\1\u0318\71\0\1\u0260\61\0\1\321\2\0\1\u0319\42\0"+
    "\1\321\10\0\1\321\60\0\1\u0298\40\0\1\u02f8\4\0"+
    "\1\373\57\0\1\u0260\52\0\1\u02f8\57\0\1\321\2\0"+
    "\1\u031a\5\0\1\345\46\0\1\u031b\16\0\1\346\61\0"+
    "\1\u031c\37\0\1\u031d\63\0\1\u0158\56\0\1\u031e\12\0"+
    "\1\321\44\0\1\u0152\53\0\1\u031f\63\0\1\u0190\53\0"+
    "\1\u0320\57\0\1\u0321\75\0\1\346\45\0\1\u012b\53\0"+
    "\1\320\4\0\1\346\71\0\1\u012b\57\0\1\346\3\0"+
    "\1\271\34\0\1\320\16\0\1\346\51\0\1\u0260\53\0"+
    "\1\367\62\0\1\346\6\0\1\320\44\0\1\320\11\0"+
    "\1\320\1\321\40\0\1\u0115\64\0\1\u0322\54\0\1\u0323"+
    "\55\0\1\161\5\0\1\u0324\54\0\1\u0325\4\0\1\u0326"+
    "\57\0\1\u01e6\2\0\1\321\42\0\1\u011e\66\0\1\u0327"+
    "\71\0\1\u024c\37\0\1\u0328\4\0\1\346\11\0\1\346"+
    "\41\0\1\u0184\57\0\1\u0329\64\0\1\u032a\71\0\1\u032b"+
    "\2\0\1\u032c\40\0\1\u0293\2\0\1\u012b\51\0\1\u012b"+
    "\57\0\1\u032d\6\0\1\u032e\62\0\1\321\45\0\1\321"+
    "\61\0\1\u01f7\55\0\1\u032f\10\0\1\u0330\5\0\1\346"+
    "\43\0\1\u029d\3\0\1\346\55\0\1\u0331\62\0\1\u0285"+
    "\57\0\1\271\61\0\1\u0332\52\0\1\u021f\5\0\1\102"+
    "\53\0\1\320\57\0\1\346\55\0\1\u01c0\61\0\1\u029d"+
    "\53\0\1\u02fe\53\0\1\u0115\60\0\1\u0333\15\0\1\u01e6"+
    "\37\0\1\u01a6\4\0\1\u01ac\55\0\1\u0334\71\0\1\u0335"+
    "\52\0\1\u0336\57\0\1\u01c0\3\0\1\u0337\7\0\1\146"+
    "\70\0\1\u012f\30\0\1\u029d\11\0\1\u029d\37\0\1\56"+
    "\5\0\1\u0338\60\0\1\u030d\5\0\1\u0339\57\0\1\u02fc"+
    "\70\0\1\u0104\31\0\1\u033a\102\0\1\u024d\36\0\1\u0184"+
    "\16\0\1\210\50\0\1\u033b\66\0\1\u033c\43\0\1\u029d"+
    "\1\0\1\320\1\u024c\1\0\1\u0165\5\0\1\346\1\321"+
    "\45\0\1\u033d\55\0\1\u0293\54\0\1\u033e\5\0\1\346"+
    "\55\0\1\u033f\63\0\1\u0202\55\0\1\u0340\51\0\1\u0341"+
    "\57\0\1\366\57\0\1\u0342\56\0\1\u0343\1\u0344\7\0"+
    "\1\u019f\56\0\1\u0342\1\0\1\u0345\46\0\1\u0346\2\0"+
    "\1\u0347\2\0\1\u0348\54\0\1\146\2\0\1\321\10\0"+
    "\1\320\36\0\1\u0349\1\0\1\u034a\15\0\1\321\41\0"+
    "\1\321\10\0\1\346\47\0\1\u034b\67\0\1\u0290\51\0"+
    "\1\u0165\63\0\1\u024f\1\0\1\116\7\0\1\u034c\35\0"+
    "\1\u034d\62\0\1\u034e\64\0\1\u034f\3\0\1\u0350\1\u0351"+
    "\2\0\1\u0352\51\0\1\u0353\1\0\1\u0354\10\0\1\u0104"+
    "\32\0\1\271\15\0\1\346\40\0\1\337\72\0\1\u024d"+
    "\47\0\1\u0355\77\0\1\271\36\0\1\u0356\4\0\1\346"+
    "\52\0\1\u0357\20\0\1\u0260\46\0\1\u0358\45\0\1\u0359"+
    "\3\0\1\u035a\67\0\1\u035b\52\0\1\u035c\50\0\1\u035d"+
    "\2\0\1\u012a\20\0\1\u02f7\40\0\1\u035e\55\0\1\u0312"+
    "\1\u035f\56\0\1\u0360\60\0\1\u0361\56\0\1\u0361\60\0"+
    "\1\u0362\60\0\1\u0363\54\0\1\u033e\15\0\1\u01e6\3\0"+
    "\1\u0114\33\0\1\u01a6\64\0\1\u01aa\3\0\1\271\52\0"+
    "\1\u0165\7\0\1\u02ad\57\0\1\320\54\0\1\u0364\101\0"+
    "\1\u0365\36\0\1\u0366\50\0\1\u0367\64\0\1\175\24\0"+
    "\1\u01eb\24\0\1\u0368\70\0\1\346\45\0\1\u01a6\12\0"+
    "\1\u029d\60\0\1\346\43\0\1\271\76\0\1\u012b\37\0"+
    "\1\u0369\61\0\1\u036a\57\0\1\u0115\4\0\1\u036b\51\0"+
    "\1\u036c\1\u036d\3\0\1\u036e\3\0\1\u036f\50\0\1\u0370"+
    "\56\0\1\u0371\67\0\1\u0372\52\0\1\u0373\55\0\1\u0370"+
    "\3\0\1\u030f\2\0\1\u0354\45\0\1\u011c\62\0\1\u0374"+
    "\56\0\1\u0375\1\u0280\11\0\1\u0376\46\0\1\u0377\2\0"+
    "\1\u0378\57\0\1\u01e7\55\0\1\u0379\1\346\5\0\1\u02ad"+
    "\50\0\1\u01a6\17\0\1\u0164\47\0\1\346\7\0\1\366"+
    "\37\0\1\u037a\105\0\1\u02f1\27\0\1\u037b\62\0\1\346"+
    "\12\0\1\u037c\57\0\1\u037d\64\0\1\u02db\46\0\1\u037e"+
    "\65\0\1\u012b\36\0\1\u037f\70\0\1\161\53\0\1\321"+
    "\11\0\1\346\45\0\1\u0380\23\0\1\u02ae\34\0\1\321"+
    "\2\0\1\161\46\0\1\321\5\0\1\u0204\1\0\1\u0381"+
    "\6\0\1\321\45\0\1\u0373\65\0\1\346\3\0\1\320"+
    "\40\0\1\346\3\0\1\u0382\53\0\1\320\5\0\1\u024c"+
    "\52\0\1\u0116\57\0\1\u0383\63\0\1\u0384\52\0\1\u0385"+
    "\4\0\1\u01c0\73\0\1\u0386\53\0\1\346\52\0\1\u0387"+
    "\50\0\1\146\63\0\1\u0388\60\0\1\122\1\0\1\346"+
    "\100\0\1\u0389\36\0\1\u016e\46\0\1\u038a\1\u0202\60\0"+
    "\1\u0355\15\0\1\346\61\0\1\146\47\0\1\u038b\46\0"+
    "\1\u038c\7\0\1\346\54\0\1\u038d\52\0\1\u038e\3\0"+
    "\1\u038f\63\0\1\u0390\6\0\1\346\43\0\1\u0119\1\u0391"+
    "\1\0\1\u0392\57\0\1\346\51\0\1\320\7\0\1\320"+
    "\54\0\1\u0393\61\0\1\u024d\17\0\1\u01e6\33\0\1\u0394"+
    "\1\0\1\u0395\3\0\1\u023b\44\0\1\146\13\0\1\u02f7"+
    "\46\0\1\u02ef\56\0\1\u0396\70\0\1\u032c\50\0\1\u038d"+
    "\63\0\1\u0397\54\0\1\146\4\0\1\u0398\2\0\1\146"+
    "\3\0\1\271\51\0\1\u0399\57\0\1\u01ff\47\0\1\u0280"+
    "\55\0\1\u01a6\63\0\1\u0293\3\0\1\u039a\46\0\1\u039b"+
    "\57\0\1\367\65\0\1\u039c\70\0\1\346\4\0\1\u0291"+
    "\37\0\1\u039d\60\0\1\u039e\57\0\1\u039f\57\0\1\u0369"+
    "\77\0\1\271\40\0\1\u024d\56\0\1\146\52\0\1\u03a0"+
    "\72\0\1\u03a1\60\0\1\346\62\0\1\u03a2\45\0\1\u0200"+
    "\62\0\1\271\53\0\1\u03a3\57\0\1\u03a4\62\0\1\u03a5"+
    "\50\0\1\u03a6\71\0\1\u012b\51\0\1\u03a7\56\0\1\u027a"+
    "\54\0\1\u025e\63\0\1\u03a8\74\0\1\u03a9\40\0\1\u024d"+
    "\64\0\1\u024d\60\0\1\u02a6\1\0\1\u0278\52\0\1\346"+
    "\1\0\1\346\52\0\1\346\5\0\1\271\56\0\1\u016c"+
    "\55\0\1\u0220\62\0\1\u034d\70\0\1\346\46\0\1\u03aa"+
    "\57\0\1\u01cd\51\0\1\u0271\100\0\1\102\46\0\1\161"+
    "\54\0\1\u01b7\50\0\1\u0310\2\0\1\u03ab\57\0\1\u03ac"+
    "\1\u03ad\62\0\1\u039b\50\0\1\u01e7\2\0\1\146\54\0"+
    "\1\u03ae\3\0\1\337\5\0\1\u03af\50\0\1\u03b0\56\0"+
    "\1\u03b1\64\0\1\56\14\0\1\u03b2\33\0\1\u03b3\64\0"+
    "\1\346\13\0\1\321\51\0\1\321\62\0\1\346\64\0"+
    "\1\u03b4\43\0\1\u03b5\55\0\1\346\2\0\1\346\56\0"+
    "\1\u03b6\51\0\1\161\4\0\1\161\72\0\1\u03b7\43\0"+
    "\1\u029d\63\0\1\u032e\56\0\1\u03b8\57\0\1\u03b9\66\0"+
    "\1\u0158\63\0\1\u03ba\36\0\1\u03bb\70\0\1\u03bc\53\0"+
    "\1\u011e\55\0\1\u03bd\70\0\1\u01c9\64\0\1\u03be\36\0"+
    "\1\u03bf\102\0\1\u0259\1\u03c0\64\0\1\u03c1\26\0\1\u03c2"+
    "\16\0\1\u03ba\71\0\1\u03c3\33\0\1\u03c4\60\0\1\175"+
    "\56\0\1\u03c5\105\0\1\u01eb\36\0\1\u02ad\7\0\1\u03c6"+
    "\42\0\1\u038d\4\0\1\320\46\0\1\u03c7\63\0\1\u03c8"+
    "\103\0\1\u03c9\33\0\1\u01fe\74\0\1\u0370\40\0\1\u0293"+
    "\2\0\1\u03ca\56\0\1\u03cb\71\0\1\u03cc\37\0\1\u0204"+
    "\71\0\1\u03cd\54\0\1\u03ce\70\0\1\u03cf\61\0\1\u03d0"+
    "\51\0\1\u03d1\52\0\1\u03d2\57\0\1\146\53\0\1\u0278"+
    "\2\0\1\u016c\65\0\1\u024c\52\0\1\u03d3\102\0\1\u03d4"+
    "\26\0\1\u03d5\6\0\1\u03d6\11\0\1\u03d7\40\0\1\u03d8"+
    "\16\0\1\u03d9\43\0\1\u03da\55\0\1\u03db\56\0\1\u03dc"+
    "\65\0\1\u03dd\60\0\1\u03de\52\0\1\u03df\54\0\1\u03e0"+
    "\107\0\1\u03e1\26\0\1\u03e2\56\0\1\161\62\0\1\u03e3"+
    "\55\0\1\u03e4\60\0\1\u03e5\60\0\1\u03e6\55\0\1\u03e7"+
    "\61\0\1\u03e8\76\0\1\u03e9\40\0\1\u03ea\106\0\1\u03eb"+
    "\26\0\1\u03ec\65\0\1\u03ed\56\0\1\u0138\56\0\1\u03ee"+
    "\61\0\1\u03ef\64\0\1\321\65\0\1\321\43\0\1\u03f0"+
    "\52\0\1\u03f1\101\0\1\u03f2\37\0\1\337\61\0\1\u016d"+
    "\54\0\1\u03f3\62\0\1\373\60\0\1\u03f4\66\0\1\u03f5"+
    "\50\0\1\u01cd\52\0\1\122\72\0\1\u0298\57\0\1\u03f6"+
    "\42\0\1\u0277\60\0\1\146\6\0\1\u03f7\47\0\1\u0310"+
    "\3\0\1\u0370\106\0\1\u03f8\33\0\1\u03f9\54\0\1\321"+
    "\65\0\1\u03fa\55\0\1\u0165\52\0\1\u0278\57\0\1\u012a"+
    "\65\0\1\u03fb\55\0\1\u0278\53\0\1\u025e\54\0\1\146"+
    "\62\0\1\u0280\3\0\1\u0122\53\0\1\u03fc\64\0\1\u03fd"+
    "\51\0\1\u03af\57\0\1\161\60\0\1\u03a9\60\0\1\u01ad"+
    "\54\0\1\321\102\0\1\u0387\66\0\1\u03fe\36\0\1\u0199"+
    "\54\0\1\u012a\55\0\1\u02e6\56\0\1\367\55\0\1\346"+
    "\22\0\1\u0358\52\0\1\u0115\51\0\1\u0158\54\0\1\u03ff"+
    "\57\0\1\u0400\53\0\1\u0401\3\0\1\u0300\7\0\1\u038d"+
    "\3\0\1\u03ba\36\0\1\u0402\60\0\1\u0184\56\0\1\u0151"+
    "\100\0\1\u0403\60\0\1\u0404\36\0\1\u0405\61\0\1\u01bc"+
    "\2\0\1\u0406\61\0\1\u0407\57\0\1\u0408\52\0\1\155"+
    "\52\0\1\u0409\74\0\1\u040a\47\0\1\u029d\1\0\1\u0119"+
    "\57\0\1\u0122\60\0\1\u034f\57\0\1\161\56\0\1\u040b"+
    "\73\0\1\u0184\57\0\1\u040c\43\0\1\u013d\52\0\1\u030c"+
    "\4\0\1\346\73\0\1\u0342\40\0\1\u040d\16\0\1\u040e"+
    "\43\0\1\u0342\73\0\1\u040f\43\0\1\u0410\56\0\1\u0411"+
    "\53\0\1\u0152\55\0\1\u0412\61\0\1\u034f\65\0\1\u0234"+
    "\52\0\1\337\60\0\1\337\2\0\1\u0413\50\0\1\u0414"+
    "\11\0\1\u0415\71\0\1\u0416\36\0\1\u0417\3\0\1\u027a"+
    "\50\0\1\u0280\72\0\1\u0190\53\0\1\u0418\54\0\1\u0419"+
    "\56\0\1\u041a\65\0\1\366\12\0\1\u041b\44\0\1\u0164"+
    "\55\0\1\u041c\50\0\1\u041d\64\0\1\320\105\0\1\u041e"+
    "\31\0\1\u0363\6\0\1\u024d\64\0\1\u028c\43\0\1\u03b9"+
    "\62\0\1\u019f\55\0\1\346\55\0\1\u041f\53\0\1\u0420"+
    "\61\0\1\320\16\0\1\u0421\43\0\1\u0422\61\0\1\u0423"+
    "\56\0\1\271\54\0\1\u0424\55\0\1\u032c\62\0\1\u0425"+
    "\53\0\1\u0322\23\0\1\u0426\57\0\1\u0427\36\0\1\u017e"+
    "\75\0\1\271\42\0\1\56\53\0\1\56\60\0\1\u0265"+
    "\23\0\1\u0104\42\0\1\u0176\52\0\1\u0428\56\0\1\271"+
    "\21\0\1\u025e\45\0\1\u0429\65\0\1\320\57\0\1\u029d"+
    "\44\0\1\u0279\64\0\1\u0144\54\0\1\u012a\7\0\1\u012b"+
    "\44\0\1\u03b2\100\0\1\u042a\34\0\1\u038c\75\0\1\u028c"+
    "\47\0\1\u042b\47\0\1\u042c\103\0\1\u014b\33\0\1\u042d"+
    "\71\0\1\u042e\73\0\1\u042f\34\0\1\u0430\56\0\1\u03ba"+
    "\100\0\1\u0115\37\0\1\u0401\54\0\1\u0431\2\0\1\u0432"+
    "\1\u0433\2\0\1\146\52\0\1\u0434\20\0\1\102\36\0"+
    "\1\u0435\62\0\1\u0436\53\0\1\u023b\107\0\1\u0437\31\0"+
    "\1\u0438\75\0\1\u0439\45\0\1\u043a\52\0\1\u043b\4\0"+
    "\1\346\65\0\1\146\43\0\1\146\101\0\1\u02db\44\0"+
    "\1\u043c\62\0\1\u028b\65\0\1\u0373\57\0\1\u02b1\40\0"+
    "\1\u02db\70\0\1\u0158\51\0\1\u043d\56\0\1\u043e\65\0"+
    "\1\u043f\55\0\1\u0440\55\0\1\u03db\51\0\1\u011c\24\0"+
    "\1\271\36\0\1\u012a\67\0\1\u0441\50\0\1\u03df\65\0"+
    "\1\146\5\0\1\u0104\43\0\1\u0442\57\0\1\373\2\0"+
    "\1\271\47\0\1\u0310\64\0\1\271\62\0\1\373\52\0"+
    "\1\u0443\63\0\1\u02a5\60\0\1\u012b\50\0\1\u0444\66\0"+
    "\1\u0445\70\0\1\u024d\61\0\1\u0446\46\0\1\u0447\53\0"+
    "\1\u0448\75\0\1\u0449\36\0\1\u0401\13\0\1\u038d\42\0"+
    "\1\u02b2\60\0\1\u044a\57\0\1\u0401\3\0\1\u0300\7\0"+
    "\1\u038d\43\0\1\u044b\102\0\1\u044c\37\0\1\u01e0\51\0"+
    "\1\u044d\60\0\1\u044e\67\0\1\u044f\55\0\1\375\50\0"+
    "\1\u0450\66\0\1\u0451\52\0\1\u03b2\66\0\1\u0452\67\0"+
    "\1\u0453\41\0\1\u0454\57\0\1\u0455\60\0\1\u0456\66\0"+
    "\1\u0260\1\u0457\71\0\1\u0458\54\0\1\u0459\37\0\1\u045a"+
    "\100\0\1\u045b\50\0\1\u045c\51\0\1\u045d\73\0\1\u045e"+
    "\37\0\1\u045f\60\0\1\u0460\66\0\1\u0461\47\0\1\u0462"+
    "\100\0\1\271\54\0\1\u0463\40\0\1\u0464\70\0\1\u0465"+
    "\70\0\1\u0466\36\0\1\u0401\3\0\1\u0300\7\0\1\u0467"+
    "\45\0\1\u0468\57\0\1\u0469\75\0\1\u046a\40\0\1\u046b"+
    "\62\0\1\u046c\74\0\1\u046d\47\0\1\u046e\47\0\1\u024d"+
    "\57\0\1\u046f\60\0\1\u0470\62\0\1\u0260\57\0\1\u0222"+
    "\62\0\1\u023b\51\0\1\u0471\55\0\1\u0472\56\0\1\u02ed"+
    "\60\0\1\u01b2\57\0\1\u0473\7\0\1\u0474\54\0\1\u0475"+
    "\66\0\1\122\56\0\1\u0104\46\0\1\161\55\0\1\u0271"+
    "\61\0\1\u0476\54\0\1\u0477\110\0\1\u0478\33\0\1\u03c0"+
    "\73\0\1\u02e9\34\0\1\u0479\60\0\1\u039c\74\0\1\u047a"+
    "\41\0\1\u047b\76\0\1\u0202\47\0\1\u047c\52\0\1\u047d"+
    "\65\0\1\65\73\0\1\u028b\36\0\1\u047e\63\0\1\u047f"+
    "\75\0\1\u0480\42\0\1\u0481\64\0\1\u0482\52\0\1\u0483"+
    "\65\0\1\u0484\50\0\1\u0419\51\0\1\u0485\77\0\1\u0486"+
    "\43\0\1\u029d\2\0\1\u012b\60\0\1\321\53\0\1\u01a7"+
    "\65\0\1\u0487\53\0\1\u047e\52\0\1\u01e0\55\0\1\u0488"+
    "\67\0\1\u0489\61\0\1\u048a\54\0\1\u016a\60\0\1\u048b"+
    "\53\0\1\u048c\100\0\1\u0104\42\0\1\u02a6\62\0\1\u048d"+
    "\46\0\1\u028c\10\0\1\271\50\0\1\u021f\62\0\1\u048e"+
    "\63\0\1\u048f\47\0\1\u0490\62\0\1\161\52\0\1\u0491"+
    "\66\0\1\u0492\54\0\1\u0493\77\0\1\366\57\0\1\u0113"+
    "\34\0\1\u0494\100\0\1\u029d\43\0\1\u0300\7\0\1\u038d"+
    "\3\0\1\u03ba\55\0\1\u0495\41\0\1\u041a\3\0\1\346"+
    "\76\0\1\u024c\34\0\1\u0496\64\0\1\u0447\53\0\1\u01cd"+
    "\62\0\1\u0497\56\0\1\u0498\56\0\1\247\64\0\1\u0499"+
    "\100\0\1\u049a\24\0\1\u049b\57\0\1\u049c\64\0\1\u030d"+
    "\75\0\1\u049d\40\0\1\u049e\57\0\1\u049f\53\0\1\u0112"+
    "\103\0\1\u04a0\40\0\1\u04a1\54\0\1\u04a2\10\0\1\u04a3"+
    "\57\0\1\u0475\50\0\1\u04a4\60\0\1\u012b\52\0\1\u04a5"+
    "\63\0\1\u04a6\74\0\1\u04a7\71\0\1\u04a8\24\0\1\u032c"+
    "\62\0\1\u04a9\67\0\1\u04aa\46\0\1\u04ab\62\0\1\u04ac"+
    "\55\0\1\u03dd\64\0\1\u04ad\53\0\1\u04ae\65\0\1\u04af"+
    "\52\0\1\u04b0\105\0\1\u04b1\24\0\1\u04b2\110\0\1\271"+
    "\47\0\1\247\45\0\1\u0157\52\0\1\u028c\64\0\1\u04b3"+
    "\73\0\1\u04b4\37\0\1\u04b5\64\0\1\u04b6\101\0\1\u04b7"+
    "\33\0\1\u02db\63\0\1\u04b8\54\0\1\u04b9\55\0\1\u04ba"+
    "\62\0\1\u0157\62\0\1\u012b\53\0\1\u04bb\52\0\1\u04bc"+
    "\66\0\1\u0486\60\0\1\u0200\73\0\1\u04bd\35\0\1\u04be"+
    "\56\0\1\u04bf\67\0\1\u04c0\47\0\1\u04c1\56\0\1\u04c2"+
    "\67\0\1\u0152\57\0\1\u0260\60\0\1\u046d\67\0\1\u04c3"+
    "\41\0\1\u024d\62\0\1\u04c4\56\0\1\u04c5\50\0\1\u04c6"+
    "\72\0\1\u04c7\46\0\1\373\67\0\1\u04c8\47\0\1\321"+
    "\4\0\1\346\57\0\1\u049c\57\0\1\u04c9\66\0\1\u04ca"+
    "\50\0\1\u04cb\63\0\1\u04cc\65\0\1\u011b\43\0\1\u04cd"+
    "\54\0\1\u0358\65\0\1\u04be\51\0\1\u04ce\65\0\1\u04cf"+
    "\63\0\1\u0372\47\0\1\u04d0\53\0\1\u048d\61\0\1\u030c"+
    "\67\0\1\u0115\52\0\1\u04d1\105\0\1\u012d\57\0\1\u04d2"+
    "\24\0\1\u01ff\67\0\1\u04d3\54\0\1\u0204\76\0\1\u04d4"+
    "\47\0\1\u0158\67\0\1\u04d5\45\0\1\u04d6\66\0\1\u04d7"+
    "\71\0\1\u04d8\34\0\1\u04d9\73\0\1\u04da\43\0\1\u04db"+
    "\53\0\1\u04dc\55\0\1\u04dd\110\0\1\u04de\33\0\1\u045c"+
    "\52\0\1\u045c\61\0\1\u04df\77\0\1\u04e0\45\0\1\u04e1"+
    "\66\0\1\u04e2\37\0\1\u04e3\70\0\1\u04e4\54\0\1\u04e5"+
    "\71\0\1\u0348\51\0\1\u04e6\46\0\1\u04e7\1\0\1\u04e8"+
    "\6\0\1\u04e9\12\0\1\u04ea\50\0\1\330\52\0\1\u04eb"+
    "\54\0\1\u04ec\57\0\1\u04ed\56\0\1\u04ee\53\0\1\u04ef"+
    "\64\0\1\u04f0\103\0\1\u04f1\34\0\1\u04f2\64\0\1\u02f8"+
    "\61\0\1\u04c7\52\0\1\u0164\100\0\1\u04f3\30\0\1\330"+
    "\53\0\1\u03b2\57\0\1\u01e7\3\0\1\u04f4\66\0\1\u0373"+
    "\55\0\1\u024d\54\0\1\u0234\51\0\1\u04f5\100\0\1\u03a2"+
    "\46\0\1\u04f6\62\0\1\u04f7\44\0\1\u03b6\67\0\1\u04f8"+
    "\51\0\1\u04f9\64\0\1\u04a2\63\0\1\u04fa\53\0\1\u0475"+
    "\76\0\1\u024d\34\0\1\u04fb\70\0\1\u04fc\50\0\1\u04fd"+
    "\65\0\1\u04fe\47\0\1\u04ff\64\0\1\u0500\53\0\1\u0501"+
    "\101\0\1\u045c\41\0\1\u0348\56\0\1\122\64\0\1\u0268"+
    "\6\0\1\u0502\41\0\1\u0259\61\0\1\u0503\53\0\1\u0504"+
    "\1\u0505\62\0\1\u0506\60\0\1\330\67\0\1\u0158\62\0"+
    "\1\u0507\60\0\1\u0417\35\0\1\u0508\61\0\1\u046c\55\0"+
    "\1\u0509\61\0\1\u0119\66\0\1\u04f2\45\0\1\u02f8\56\0"+
    "\1\u050a\66\0\1\u050b\54\0\1\u050c\62\0\1\u04c1\54\0"+
    "\1\u050d\53\0\1\u050e\61\0\1\u0373\55\0\1\u050f\63\0"+
    "\1\u03f4\62\0\1\u0510\55\0\1\u0511\55\0\1\u0512\55\0"+
    "\1\u0513\66\0\1\u0257\73\0\1\u0514\46\0\1\u0515\46\0"+
    "\1\u0158\60\0\1\u0516\77\0\1\u0517\41\0\1\u050b\73\0"+
    "\1\u038d\71\0\1\u0518\31\0\1\u0234\71\0\1\u04a2\45\0"+
    "\1\u0510\73\0\1\u0471\40\0\1\u0519\65\0\1\u051a\53\0"+
    "\1\u051b\63\0\1\u03c0\62\0\1\u04be\45\0\1\u012b\56\0"+
    "\1\u051c\72\0\1\u051d\54\0\1\u051e\70\0\1\u03ba\43\0"+
    "\1\u051a\57\0\1\u04bd\52\0\1\u051f\57\0\1\u0520\76\0"+
    "\1\u0475\50\0\1\u0521\66\0\1\u04be\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[59088];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\17\11\1\1\1\0\1\1\1\0"+
    "\1\1\4\0\1\1\20\0\1\1\6\0\2\1\4\0"+
    "\1\11\4\0\2\1\4\0\1\1\2\0\1\1\4\0"+
    "\1\1\27\0\1\11\11\0\1\1\16\0\1\1\13\0"+
    "\1\1\2\0\1\1\1\0\1\11\7\0\1\1\6\0"+
    "\1\1\3\0\1\1\17\0\1\1\1\0\1\1\3\0"+
    "\2\11\5\0\1\1\1\11\11\0\1\1\3\0\1\11"+
    "\11\0\1\1\4\0\1\1\47\0\1\1\5\0\1\1"+
    "\4\0\1\1\2\0\1\11\6\0\1\11\12\0\1\11"+
    "\5\0\1\1\21\0\1\1\1\0\2\11\12\0\1\1"+
    "\12\0\2\1\21\0\1\1\15\0\1\1\4\0\1\1"+
    "\24\0\1\1\22\0\1\1\6\0\1\1\2\0\1\1"+
    "\21\0\2\1\5\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\12\0\1\1\7\0\1\1\11\0\1\11"+
    "\1\1\6\0\1\1\15\0\1\1\2\0\1\1\32\0"+
    "\1\1\5\0\2\1\2\0\1\1\2\0\1\1\11\0"+
    "\1\11\4\0\1\1\10\0\1\1\4\0\1\11\74\0"+
    "\1\11\2\0\1\1\1\0\1\1\12\0\1\1\15\0"+
    "\2\1\1\0\1\1\3\0\1\1\30\0\1\11\10\0"+
    "\1\1\3\0\1\1\4\0\1\1\2\0\1\1\51\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\2\0"+
    "\1\1\5\0\2\1\3\0\1\1\2\0\1\1\4\0"+
    "\1\1\3\0\1\11\1\0\1\1\4\0\1\11\4\0"+
    "\1\1\2\0\1\1\23\0\1\1\24\0\1\11\10\0"+
    "\1\1\5\0\1\1\12\0\1\11\4\0\1\1\27\0"+
    "\1\1\6\0\1\1\3\0\1\1\4\0\1\11\11\0"+
    "\1\11\1\1\15\0\1\1\31\0\1\1\3\0\1\1"+
    "\16\0\1\1\11\0\1\1\1\0\1\1\24\0\1\1"+
    "\11\0\1\1\45\0\1\1\25\0\1\1\10\0\2\1"+
    "\3\0\1\11\36\0\1\1\4\0\1\1\10\0\1\11"+
    "\1\1\3\0\1\1\13\0\1\1\11\0\2\11\2\0"+
    "\2\11\4\0\1\11\1\0\1\1\50\0\1\11\57\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public String error;
TablaErrores te=new TablaErrores();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { te.addTable("Error Lexico", yytext()+ " fila "+(yyline+1));
//JOptionPane.showMessageDialog(null, yytext()+ " fila "+(yyline+1), "Error Lexico", JOptionPane.ERROR_MESSAGE);
//System.out.println("Error lexico: "+yytext()+ " fila "+(yyline+1));
            }
          case 54: break;
          case 2: 
            { return new Symbol(sym.art_indefinido, yychar,yyline,new String(yytext()));
            }
          case 55: break;
          case 3: 
            { return new Symbol(sym.pro_personal, yychar,yyline,new String(yytext()));
            }
          case 56: break;
          case 4: 
            { return new Symbol(sym.guion, yychar,yyline,yytext());
            }
          case 57: break;
          case 5: 
            { /* ignore */
            }
          case 58: break;
          case 6: 
            { return new Symbol(sym.punto, yychar,yyline,yytext());
            }
          case 59: break;
          case 7: 
            { return new Symbol(sym.coma, yychar,yyline,yytext());
            }
          case 60: break;
          case 8: 
            { return new Symbol(sym.puntocoma, yychar,yyline,yytext());
            }
          case 61: break;
          case 9: 
            { return new Symbol(sym.dospuntos, yychar,yyline,yytext());
            }
          case 62: break;
          case 10: 
            { return new Symbol(sym.interrogacionabierto, yychar,yyline,yytext());
            }
          case 63: break;
          case 11: 
            { return new Symbol(sym.interrogacioncerrado, yychar,yyline,yytext());
            }
          case 64: break;
          case 12: 
            { return new Symbol(sym.admiracionabierto, yychar,yyline,yytext());
            }
          case 65: break;
          case 13: 
            { return new Symbol(sym.admiracioncerrado, yychar,yyline,yytext());
            }
          case 66: break;
          case 14: 
            { return new Symbol(sym.parentesisabierto, yychar,yyline,yytext());
            }
          case 67: break;
          case 15: 
            { return new Symbol(sym.parentesiscerrado, yychar,yyline,yytext());
            }
          case 68: break;
          case 16: 
            { return new Symbol(sym.corcheteabierto, yychar,yyline,yytext());
            }
          case 69: break;
          case 17: 
            { return new Symbol(sym.corchetecerrado, yychar,yyline,yytext());
            }
          case 70: break;
          case 18: 
            { return new Symbol(sym.asterisco, yychar,yyline,yytext());
            }
          case 71: break;
          case 19: 
            { return new Symbol(sym.diagonal, yychar,yyline,yytext());
            }
          case 72: break;
          case 20: 
            { return new Symbol(sym.preposicion, yychar,yyline,new String(yytext()));
            }
          case 73: break;
          case 21: 
            { return new Symbol(sym.advio_afirmacion, yychar,yyline,new String(yytext()));
            }
          case 74: break;
          case 22: 
            { return new Symbol(sym.conjun_coor_distributiva, yychar,yyline,new String(yytext()));
            }
          case 75: break;
          case 23: 
            { return new Symbol(sym.advio_negacion, yychar,yyline,new String(yytext()));
            }
          case 76: break;
          case 24: 
            { return new Symbol(sym.verbo_regular, yychar,yyline,new String(yytext()));
            }
          case 77: break;
          case 25: 
            { return new Symbol(sym.adj_posesivo, yychar,yyline,new String(yytext()));
            }
          case 78: break;
          case 26: 
            { return new Symbol(sym.advio_cantidad, yychar,yyline,new String(yytext()));
            }
          case 79: break;
          case 27: 
            { return new Symbol(sym.ver_irregular_pasadosimple, yychar,yyline,new String(yytext()));
            }
          case 80: break;
          case 28: 
            { return new Symbol(sym.sustantivo, yychar,yyline,new String(yytext()));
            }
          case 81: break;
          case 29: 
            { return new Symbol(sym.adj_indefinido, yychar,yyline,new String(yytext()));
            }
          case 82: break;
          case 30: 
            { return new Symbol(sym.conjun_coor_copulativa, yychar,yyline,new String(yytext()));
            }
          case 83: break;
          case 31: 
            { return new Symbol(sym.adj_numeral_cardinal, yychar,yyline,new String(yytext()));
            }
          case 84: break;
          case 32: 
            { return new Symbol(sym.art_definido, yychar,yyline,new String(yytext()));
            }
          case 85: break;
          case 33: 
            { return new Symbol(sym.adj_calificativo, yychar,yyline,new String(yytext()));
            }
          case 86: break;
          case 34: 
            { return new Symbol(sym.ver_ing, yychar,yyline,new String(yytext()));
            }
          case 87: break;
          case 35: 
            { return new Symbol(sym.contraccion, yychar,yyline,yytext());
            }
          case 88: break;
          case 36: 
            { return new Symbol(sym.conjun_coor_disyuntiva, yychar,yyline,new String(yytext()));
            }
          case 89: break;
          case 37: 
            { return new Symbol(sym.advio_tiempo, yychar,yyline,new String(yytext()));
            }
          case 90: break;
          case 38: 
            { return new Symbol(sym.ver_irregular_pasadoparticipio, yychar,yyline,new String(yytext()));
            }
          case 91: break;
          case 39: 
            { return new Symbol(sym.interjeccion, yychar,yyline,yytext());
            }
          case 92: break;
          case 40: 
            { return new Symbol(sym.pro_interrogativo, yychar,yyline,new String(yytext()));
            }
          case 93: break;
          case 41: 
            { return new Symbol(sym.advio_modo, yychar,yyline,new String(yytext()));
            }
          case 94: break;
          case 42: 
            { return new Symbol(sym.advio_lugar, yychar,yyline,new String(yytext()));
            }
          case 95: break;
          case 43: 
            { return new Symbol(sym.adj_demostrativo, yychar,yyline,new String(yytext()));
            }
          case 96: break;
          case 44: 
            { return new Symbol(sym.aux_futuro, yychar,yyline,new String(yytext()));
            }
          case 97: break;
          case 45: 
            { return new Symbol(sym.adj_numeral_ordinal, yychar,yyline,new String(yytext()));
            }
          case 98: break;
          case 46: 
            { return new Symbol(sym.conjun_coor_explicativa, yychar,yyline,new String(yytext()));
            }
          case 99: break;
          case 47: 
            { return new Symbol(sym.conjun_subor_consecutiva, yychar,yyline,yytext());
            }
          case 100: break;
          case 48: 
            { return new Symbol(sym.conjun_coor_adversativa, yychar,yyline,new String(yytext()));
            }
          case 101: break;
          case 49: 
            { return new Symbol(sym.conjun_subor_consesiva, yychar,yyline,yytext());
            }
          case 102: break;
          case 50: 
            { return new Symbol(sym.conjun_subor_causal, yychar,yyline,yytext());
            }
          case 103: break;
          case 51: 
            { return new Symbol(sym.conjun_subor_final, yychar,yyline,yytext());
            }
          case 104: break;
          case 52: 
            { return new Symbol(sym.advio_duda, yychar,yyline,new String(yytext()));
            }
          case 105: break;
          case 53: 
            { return new Symbol(sym.conjun_subor_condicional, yychar,yyline,yytext());
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
